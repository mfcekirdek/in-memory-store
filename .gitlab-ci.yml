image: golang:1.16-alpine3.14

stages:
    - build
    - test
    - dockerize
    - deploy

.go-cache:
  variables:
    GOPATH: /go
  before_script:
    - mkdir -p /go/src/gitlab.com/mfcekirdek/in-memory-store /go/src/_/builds/mfcekirdek/in-memory-store
    - cp -r $CI_PROJECT_DIR /go/src/gitlab.com/mfcekirdek/in-memory-store/app
    - ln -s /go/src/gitlab.com/mfcekirdek/in-memory-store /go/src/_/builds/mfcekirdek/in-memory-store
    - go mod download
    - go get -u golang.org/x/lint/golint
  cache:
    paths:
      - /go/pkg/mod/
      - /go/golang.org
      - /go/google.golang.org
      - /go/gopkg.in

build-job:
  stage: build
  extends: .go-cache
  before_script:
    - go get -d ./...
    - go mod tidy
  script:
    - echo "Compiling the code..."
    - go build -o app ./cmd/main.go
    - cat go.sum
  artifacts:
    paths:
      - app

lint-test-job:
  image: golangci/golangci-lint:v1.41.1
  stage: test
  extends: .go-cache
  variables:
    LINT_TIMEOUT: 5m
    LINT_CONFIG_PATH: "configs/linter/.golangci.yml"
    EXTRA_PARAMETERS: ""
  script:
    - golangci-lint version
    - golangci-lint run -c $LINT_CONFIG_PATH -v --timeout $LINT_TIMEOUT $EXTRA_PARAMETERS --fix

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests..."

dockerize-job:   # This job runs in the dockerize stage.
  stage: dockerize    # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Dockerizing the app..."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only starts when the job in the dockerize stage completes successfully.
  script:
    - echo "Deploying application..."