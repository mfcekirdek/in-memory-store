// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/store_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStoreRepository is a mock of StoreRepository interface.
type MockStoreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStoreRepositoryMockRecorder
}

// MockStoreRepositoryMockRecorder is the mock recorder for MockStoreRepository.
type MockStoreRepositoryMockRecorder struct {
	mock *MockStoreRepository
}

// NewMockStoreRepository creates a new mock instance.
func NewMockStoreRepository(ctrl *gomock.Controller) *MockStoreRepository {
	mock := &MockStoreRepository{ctrl: ctrl}
	mock.recorder = &MockStoreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreRepository) EXPECT() *MockStoreRepositoryMockRecorder {
	return m.recorder
}

// Flush mocks base method.
func (m *MockStoreRepository) Flush() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockStoreRepositoryMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockStoreRepository)(nil).Flush))
}

// Get mocks base method.
func (m *MockStoreRepository) Get(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockStoreRepositoryMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStoreRepository)(nil).Get), key)
}

// GetStore mocks base method.
func (m *MockStoreRepository) GetStore() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetStore indicates an expected call of GetStore.
func (mr *MockStoreRepositoryMockRecorder) GetStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockStoreRepository)(nil).GetStore))
}

// LoadStore mocks base method.
func (m *MockStoreRepository) LoadStore(store map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadStore", store)
}

// LoadStore indicates an expected call of LoadStore.
func (mr *MockStoreRepositoryMockRecorder) LoadStore(store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadStore", reflect.TypeOf((*MockStoreRepository)(nil).LoadStore), store)
}

// Set mocks base method.
func (m *MockStoreRepository) Set(key, value string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStoreRepositoryMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStoreRepository)(nil).Set), key, value)
}
